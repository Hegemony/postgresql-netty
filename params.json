{"name":"postgresql-netty","body":"# postgresql-netty - an async Netty/NIO based PostgreSQL driver written in Scala\r\n\r\nThe main goal of this project is to implement a performant and fully functional async PostgreSQL driver. This project\r\nhas no interest in JDBC, it's supposed to be a clean room implementation for people interested in talking directly\r\nto PostgreSQL.\r\n\r\n[PostgreSQL protocol information and definition can be found here](http://www.postgresql.org/docs/devel/static/protocol.html)\r\n\r\n## What can it do now?\r\n\r\n- connect to a database without authentication (it only connects if it gets an AuthenticationOk message)\r\n- receive parameters\r\n- receive database notices\r\n- execute direct queries\r\n- execute queries using prepared statements/portals\r\n- parses all basic PostgreSQL types, other types are parsed as string\r\n- date, time and timestamp types are handled as JodaTime objects and **not** as **java.util.Date** objects\r\n\r\n## What is missing?\r\n\r\n- stored procedures\r\n- authentication mechanisms\r\n- benchmarks and more testing\r\n\r\n## What are the design goals?\r\n\r\n- fast, fast and faster\r\n- small memory footprint\r\n- avoid copying data as much as possible (we're always trying to use wrap and slice on buffers)\r\n- easy to use, call a method, get a future or a callback and be happy\r\n- never, ever, block (the only real blocking right now is at the connection pool)\r\n- all features covered by tests\r\n\r\n## How can I help?\r\n\r\n- checkout the source code\r\n- find bugs, find places where performance can be improved\r\n- check the **What is missing** piece\r\n- send a pull request with specs\r\n\r\nThis project is freely available under the MIT licence, use it at your own risk.","tagline":"An async PostgreSQL driver written in Scala using the Netty library","google":"UA-31162872-1","note":"Don't delete this file! It's used internally to help with page regeneration."}